// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WorklogShiftView should describe the absence of own worklogs 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      This is just work in Progress
      <p>
        No work logged here for you yet
      </p>
    </div>
  </body>,
  "container": <div>
    This is just work in Progress
    <p>
      No work logged here for you yet
    </p>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`WorklogShiftView should not show a worklog while it's loading 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      This is just work in Progress
      <p>
        Loading...
      </p>
    </div>
  </body>,
  "container": <div>
    This is just work in Progress
    <p>
      Loading...
    </p>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`WorklogShiftView should show the worklogs for the current user and issue when loading is done 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      This is just work in Progress
      <div
        class="estimationShiftContainer"
      >
        <table>
          <thead>
            <tr>
              <th
                align="center"
              >
                Start
              </th>
              <th
                align="center"
              >
                Comment
              </th>
              <th
                align="center"
              >
                Time Spent
              </th>
              <th
                align="center"
              >
                Time to move
              </th>
              <th
                align="center"
              >
                Move
              </th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td
                align="center"
                style="padding-right: 0.5em;"
              >
                <p>
                  2019-10-01 01:02:03
                </p>
              </td>
              <td
                align="center"
                style="padding-right: 0.5em;"
              >
                <p>
                  first step
                </p>
              </td>
              <td
                align="center"
                style="padding-right: 0.5em;"
              >
                <p>
                  1m
                </p>
              </td>
              <td
                align="center"
                style="padding-right: 0.5em;"
              >
                <input
                  data-testid="ShiftInput1111"
                  placeholder="5h 9m"
                  type="text"
                  value="1m"
                />
              </td>
              <td
                align="center"
                style="padding-right: 0.5em;"
              >
                <button
                  data-testid="ShiftButton1111"
                  title="move"
                >
                  &gt;
                </button>
              </td>
            </tr>
            <tr>
              <td
                align="center"
                style="padding-right: 0.5em;"
              >
                <p>
                  2020-01-10 01:03:04
                </p>
              </td>
              <td
                align="center"
                style="padding-right: 0.5em;"
              >
                <p>
                  second step
                </p>
              </td>
              <td
                align="center"
                style="padding-right: 0.5em;"
              >
                <p>
                  2m
                </p>
              </td>
              <td
                align="center"
                style="padding-right: 0.5em;"
              >
                <input
                  data-testid="ShiftInput2222"
                  placeholder="5h 9m"
                  type="text"
                  value="2m"
                />
              </td>
              <td
                align="center"
                style="padding-right: 0.5em;"
              >
                <button
                  data-testid="ShiftButton2222"
                  title="move"
                >
                  &gt;
                </button>
              </td>
            </tr>
          </tbody>
        </table>
        <label
          style="text-align: center; align-self: baseline; display: flex; flex-direction: column;"
        >
          Target
          <input
            placeholder="ISSUE-1234"
            title="Target Issue"
            value=""
          />
        </label>
      </div>
    </div>
  </body>,
  "container": <div>
    This is just work in Progress
    <div
      class="estimationShiftContainer"
    >
      <table>
        <thead>
          <tr>
            <th
              align="center"
            >
              Start
            </th>
            <th
              align="center"
            >
              Comment
            </th>
            <th
              align="center"
            >
              Time Spent
            </th>
            <th
              align="center"
            >
              Time to move
            </th>
            <th
              align="center"
            >
              Move
            </th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td
              align="center"
              style="padding-right: 0.5em;"
            >
              <p>
                2019-10-01 01:02:03
              </p>
            </td>
            <td
              align="center"
              style="padding-right: 0.5em;"
            >
              <p>
                first step
              </p>
            </td>
            <td
              align="center"
              style="padding-right: 0.5em;"
            >
              <p>
                1m
              </p>
            </td>
            <td
              align="center"
              style="padding-right: 0.5em;"
            >
              <input
                data-testid="ShiftInput1111"
                placeholder="5h 9m"
                type="text"
                value="1m"
              />
            </td>
            <td
              align="center"
              style="padding-right: 0.5em;"
            >
              <button
                data-testid="ShiftButton1111"
                title="move"
              >
                &gt;
              </button>
            </td>
          </tr>
          <tr>
            <td
              align="center"
              style="padding-right: 0.5em;"
            >
              <p>
                2020-01-10 01:03:04
              </p>
            </td>
            <td
              align="center"
              style="padding-right: 0.5em;"
            >
              <p>
                second step
              </p>
            </td>
            <td
              align="center"
              style="padding-right: 0.5em;"
            >
              <p>
                2m
              </p>
            </td>
            <td
              align="center"
              style="padding-right: 0.5em;"
            >
              <input
                data-testid="ShiftInput2222"
                placeholder="5h 9m"
                type="text"
                value="2m"
              />
            </td>
            <td
              align="center"
              style="padding-right: 0.5em;"
            >
              <button
                data-testid="ShiftButton2222"
                title="move"
              >
                &gt;
              </button>
            </td>
          </tr>
        </tbody>
      </table>
      <label
        style="text-align: center; align-self: baseline; display: flex; flex-direction: column;"
      >
        Target
        <input
          placeholder="ISSUE-1234"
          title="Target Issue"
          value=""
        />
      </label>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`WorklogShiftView should tell the user when an error has occurred 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      This is just work in Progress
      <p>
        Error while loading worklogs for issue: 
        dafuq
      </p>
    </div>
  </body>,
  "container": <div>
    This is just work in Progress
    <p>
      Error while loading worklogs for issue: 
      dafuq
    </p>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
